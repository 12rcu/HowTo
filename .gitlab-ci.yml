image: docker:stable

stages:
  - shadow
  - build
  - deploy

variables:
  DOCKER_REGISTRY: core.harbor.timolia.de
  IMAGE_NAME: howto

shadow:
  stage: shadow
  image: gradle:6.7-jdk11
  tags:
    - docker
  script:
    - echo "$CI_COMMIT_REF_SLUG:$CI_PIPELINE_ID"
    #    - apk add --no-cache openjdk11-jdk
    #    - apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community gradle
    - java -version
    - gradle --version
    - cd howto-dapp
    - gradle shadowJar
    - ls -l build/libs/
    - cd ..
    - java -jar howto-dapp/build/libs/*.jar
  artifacts:
    name: "$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG:$CI_PIPELINE_ID:$CI_JOB_NAME"
    paths:
      - docs/team/{changes,members,responsibilities}.{de,en}.md
    expire_in: "1 hour"



build_live_de:
  stage: build
  tags:
    - docker
  dependencies:
    - shadow
  script:
    - for file in $(find . -name '*.de.md'); do echo "mv $file $(echo $file | sed 's|\.de\.md|.md|g')" && mv "$file" "$(echo $file | sed 's|\.de\.md|.md|g')"; done # use german files
    - for file in $(find . -name '*.*.md'); do echo "rm $file" && rm "$file"; done # remove all other ones
    - sed -i 's|%SITE_URL%|https://howto.timolia.de|g' mkdocs.yml
    - docker info
    - docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME
  only:
    - master

build_live_en:
  stage: build
  tags:
    - docker
  dependencies:
    - shadow
  script:
    - for file in $(find . -name '*.en.md'); do echo "mv $file $(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')" && mv "$file" "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')"; done # use english files (preferred)
    - for file in $(find . -name '*.de.md'); do if [ ! -f "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')" ]; then mv "$file" "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')"; fi; done # use german files as fallback
    - for file in $(find . -name '*.*.md'); do echo "rm $file" && rm "$file"; done # remove all other ones
    - sed -i 's|%SITE_URL%|https://howto-en.timolia.de|g' mkdocs.yml
    - docker info
    - docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME-en:$CI_COMMIT_REF_NAME .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME-en:$CI_COMMIT_REF_NAME
  only:
    - master

build_dev_de:
  stage: build
  tags:
    - docker
  dependencies:
    - shadow
  script:
    - for file in $(find . -name '*.de.md'); do echo "mv $file $(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')" && mv "$file" "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')"; done # use german files
    - for file in $(find . -name '*.*.md'); do echo "rm $file" && rm "$file"; done # remove all other ones
    - sed -i 's|%SITE_URL%|https://dev.howto.timolia.de|g' mkdocs.yml
    - docker info
    - docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:dev .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:dev
  except:
    - master

build_dev_en:
  stage: build
  tags:
    - docker
  dependencies:
    - shadow
  script:
    - for file in $(find . -name '*.en.md'); do echo "mv $file $(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')" && mv "$file" "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')"; done # use english files (preferred)
    - for file in $(find . -name '*.de.md'); do if [ ! -f "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')" ]; then mv "$file" "$(echo "$file" | sed -E 's|\.[a-z]+\.|.|g')"; fi; done # use german files as fallback
    - for file in $(find . -name '*.*.md'); do echo "rm $file" && rm "$file"; done # remove all other ones
    - sed -i 's|%SITE_URL%|https://dev.howto-en.timolia.de|g' mkdocs.yml
    - docker info
    - docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME-en:dev .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME-en:dev
  except:
    - master

#deploy_live:
#  stage: deploy
#  image: ictu/sshpass
#  tags:
#    - docker
#  script:
#    - sshpass -p $HOWTO_PW ssh -p $DEPLOY_PORT -o "StrictHostKeyChecking=no" howto@$DEPLOY_HOST
#  only:
#    - master

#deploy_dev:
#  stage: deploy
#  image: ictu/sshpass
#  tags:
#    - docker
#  script:
#    - sshpass -p $UPDATER_PW_DEV ssh -o "StrictHostKeyChecking=no" gitlab-updater@devnet-bigmac.timolia.de howto
#  except:
#    - master
